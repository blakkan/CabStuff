import numpy as np
import matplotlib.path as mplPath

if 1:
    # from tracing bounding polygon on https://www.itouchmap.com/latlong.html
    # effectively class constants
    staten_poly = mplPath.Path(np.array([
        [40.491836,-74.256248],
        [40.514121,-74.145699],
        [40.557696,-74.063644],
        [40.593682,-74.040985],
        [40.644143,-74.050598],
        [40.647104,-74.095917],
        [40.644238,-74.126816],
        [40.641503,-74.155998],
        [40.646322,-74.183807],
        [40.631442,-74.200974],
        [40.615807,-74.20372],
        [40.602775,-74.202347],
        [40.594955,-74.200287],
        [40.585569,-74.206123],
        [40.560013,-74.214363],
        [40.558708,-74.225349],
        [40.553231,-74.237709],
        [40.533664,-74.248009],
        [40.519311,-74.246979],
        [40.507304,-74.257622]
    ]))

    manhattan_poly = mplPath.Path(np.array([
        [40.697021,-74.028625],
        [40.703789,-73.998756],
        [40.70774,-73.973694],
        [40.743386,-73.965454],
        [40.769652,-73.937645],
        [40.779272,-73.938332],
        [40.778232,-73.926315],
        [40.793309,-73.909492],
        [40.799134,-73.919878],
        [40.801928,-73.922367],
        [40.801343,-73.92786],
        [40.809042,-73.933525],
        [40.825054,-73.933182],
        [40.835055,-73.93404],
        [40.849016,-73.925629],
        [40.858754,-73.918247],
        [40.870632,-73.90975],
        [40.874072,-73.91284],
        [40.87855,-73.929319],
        [40.760841,-74.014893]
    ]))

    bronx_poly = mplPath.Path(np.array([
        [40.782911,-73.889923],
        [40.79123,-73.900909],
        [40.793309,-73.909492],
        [40.799134,-73.919878],
        [40.801928,-73.922367],
        [40.801343,-73.92786],
        [40.809042,-73.933525],
        [40.825054,-73.933182],
        [40.835055,-73.93404],
        [40.849016,-73.925629],
        [40.858754,-73.918247],
        [40.870632,-73.90975],
        [40.874072,-73.91284],
        [40.87855,-73.929319],
        [40.916122,-73.913612],
        [40.900554,-73.861427],
        [40.906522,-73.857307],
        [40.901073,-73.847179],
        [40.895494,-73.845119],
        [40.868284,-73.735085],
        [40.798247,-73.785553],
        [40.796428,-73.862457],
        [40.78678,-73.864174]
    ]))

    queens_poly = mplPath.Path(np.array([
        [40.53265,-73.953781],
        [40.585921,-73.762207],
        [40.593912,-73.745728],
        [40.593521,-73.736973],
        [40.606931,-73.740749],
        [40.615547,-73.746758],
        [40.615286,-73.760834],
        [40.627013,-73.76461],
        [40.638737,-73.740921],
        [40.647334,-73.740578],
        [40.652804,-73.724785],
        [40.664524,-73.729248],
        [40.683793,-73.725471],
        [40.723078,-73.728561],
        [40.727762,-73.710537],
        [40.739078,-73.700581],
        [40.781596,-73.748302],
        [40.799417,-73.773193],
        [40.796428,-73.862457],
        [40.78678,-73.864174],
        [40.782911,-73.889923],
        [40.79123,-73.900909],
        [40.793309,-73.909492],
        [40.778232,-73.926315],
        [40.779272,-73.938332],
        [40.769652,-73.937645],
        [40.743386,-73.965454],
        [40.735429,-73.965197],
        [40.739591,-73.95421],
        [40.735299,-73.941507],
        [40.730356,-73.938589],
        [40.727949,-73.92889],
        [40.716305,-73.922796],
        [40.71572,-73.924427],
        [40.714224,-73.924084],
        [40.71071,-73.920565],
        [40.709539,-73.921852],
        [40.704725,-73.914127],
        [40.702317,-73.912926],
        [40.701146,-73.914127],
        [40.69555,-73.904171],
        [40.694053,-73.905458],
        [40.692621,-73.902798],
        [40.681687,-73.896532],
        [40.682598,-73.893442],
        [40.684291,-73.889408],
        [40.685202,-73.887606],
        [40.694769,-73.868809],
        [40.682078,-73.865976],
        [40.682533,-73.863916],
        [40.679604,-73.863316],
        [40.679279,-73.862114],
        [40.671272,-73.86014],
        [40.671793,-73.857565],
        [40.66398,-73.855848],
        [40.66346,-73.857737],
        [40.660269,-73.857393],
        [40.657998,-73.862286],
        [40.646192,-73.853531],
        [40.634339,-73.831558],
        [40.606715,-73.832932],
        [40.588989,-73.852844],
        [40.557174,-73.957214]
     ]))

    brooklyn_poly = mplPath.Path(np.array([
        [40.542104,-74.029999],
        [40.557174,-73.957214],
        [40.588989,-73.852844],
        [40.606715,-73.832932],
        [40.634339,-73.831558],
        [40.646192,-73.853531],
        [40.657998,-73.862286],
        [40.660269,-73.857393],
        [40.66346,-73.857737],
        [40.66398,-73.855848],
        [40.671793,-73.857565],
        [40.671272,-73.86014],
        [40.679279,-73.862114],
        [40.679604,-73.863316],
        [40.682533,-73.863916],
        [40.682078,-73.865976],
        [40.694769,-73.868809],
        [40.685202,-73.887606],
        [40.684291,-73.889408],
        [40.682598,-73.893442],
        [40.681687,-73.896532],
        [40.692621,-73.902798],
        [40.694053,-73.905458],
        [40.69555,-73.904171],
        [40.701146,-73.914127],
        [40.702317,-73.912926],
        [40.703749,-73.915243],
        [40.704725,-73.914127],
        [40.71071,-73.920565],
        [40.714224,-73.924084],
        [40.71572,-73.924427],
        [40.716305,-73.922796],
        [40.727949,-73.92889],
        [40.730356,-73.938589],
        [40.739591,-73.95421],
        [40.735429,-73.965197],
        [40.70774,-73.973694],
        [40.703789,-73.998756],
        [40.697021,-74.028625],
        [40.644143,-74.050598],
        [40.593682,-74.040985]
    ]))
    
    new_jersey_poly = mplPath.Path(np.array([
        [40.459191,-74.233726],
        [40.501644,-74.25975],
        [40.525038,-74.248492],
        [40.549774,-74.249176],
        [40.558082,-74.229332],
        [40.558082,-74.215942],
        [40.590419,-74.205471],
        [40.600492,-74.20039],
        [40.606618,-74.204166],
        [40.625903,-74.203136],
        [40.632547,-74.200733],
        [40.643359,-74.188545],
        [40.646355,-74.184254],
        [40.642317,-74.14151],
        [40.650523,-74.086063],
        [40.651825,-74.054649],
        [40.699605,-74.02581],
        [40.759407,-74.013039],
        [40.826986,-73.96257],
        [40.886896,-73.929474],
        [40.992191,-73.891022],
        [41.112176,-74.161285],
        [41.021061,-74.209351],
        [41.020025,-74.290375],
        [40.857154,-74.422211],
        [40.639714,-74.64743],
        [40.534381,-74.504608],
        [40.396468,-74.448303]
    ]))

    # Outer chooser- does a coarse geographic check.  Depending on the result,
    # will optimize the order of the detailed check
    # Function takes two floats, returns a string (or None) of borough name
    #
    # This function is somewhat "unrolle" (i.e. with redundant code) to
    # improve performance

    def find_borough( lat, long ):

        if long < -74.046478:  # Far west, should be Staten Island, or NJ
            if new_jersey_poly.contains_point((lat,long)):
                return "New Jersey"
            elif staten_poly.contains_point((lat,long)):
                return "Staten Island"
            elif manhattan_poly.contains_point((lat,long)):
                return "Manhattan"
            elif bronx_poly.contains_point((lat,long)):
                return "The Bronx"
            elif queens_poly.contains_point((lat,long)):
                return "Queens"
            elif brooklyn_poly.contains_point((lat,long)):
                return "Brooklyn"
            else:
                return "None"

        elif lat > 40.693256:   #northern area, try manhattan or bronx first
            if manhattan_poly.contains_point((lat,long)):
                return "Manhattan"
            elif bronx_poly.contains_point((lat,long)):
                return "The Bronx"
            elif new_jersey_poly.contains_point((lat,long)):
                return "New Jersey"
            elif queens_poly.contains_point((lat,long)):
                return "Queens"
            elif brooklyn_poly.contains_point((lat,long)):
                return "Brooklyn"
            elif staten_poly.contains_point((lat,long)):
                return "Staten Island"
            else:
                return "None"

        else:  #southern area, try booklyn then queens

            if brooklyn_poly.contains_point((lat,long)):
                return "Brooklyn"
            elif queens_poly.contains_point((lat,long)):
                return "Queens"
            elif new_jersey_poly.contains_point((lat,long)):
                return "New Jersey"
            elif staten_poly.contains_point((lat,long)):
                return "Staten Island"
            elif manhattan_poly.contains_point((lat,long)):
                return "Manhattan"
            elif bronx_poly.contains_point((lat,long)):
                return "The Bronx"
            else:
                return "None"


###
### Try it, if run standalone
###
if __name__ == "__main__":
    import sys
    res = find_borough(float(sys.argv[1]), float(sys.argv[2]))
    if res is not None:
        print res
